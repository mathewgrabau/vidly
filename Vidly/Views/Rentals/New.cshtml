@model dynamic

@{
    ViewBag.Title = "New Rental";
}

<h2>New Rental</h2>

@* This form is being used as an AJAX form instead of it. *@
<form id="newRentalForm">
    <div class="form-group">
        <label for="customers">Customer</label>
        <div class="tt-container">
            <input id="customers" name="customers" data-rule-validCustomer="true" required type="text" value="" class="form-control" />
        </div>
    </div>

    <div class="form-group">
        <label>Movie</label>
        <div class="tt-container">
            <input id="movie" name="movies" data-rule-movieSelected="true" type="text" value="" class="form-control" size=""/>
        </div>
    </div>
    
    <div class="row">
        <div class="col-md-4">
            <ul id="movies" class="list-group"></ul>        
        </div>
    </div>
    
    
    
    <button class="btn btn-primary">Submit</button>
</form>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(function() {
            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: "/api/customers?query=%QUERY",
                    wildcard: '%QUERY',
                    filter: function (data) {
                        return data;
                    }
                }
            });

            // A view model for the script/client code side of the house.
            var vm = {
                movieIds: []
            };

            $("#customers").typeahead(null, {
                    name: 'customers',
                    display: 'name',
                    source: customers
            }).on("typeahead:select",
                function (e, customer) {
                    // Store the movie to send ti o
                    vm.customerId = customer.id;
                });

            var movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: "/api/movies?query=%QUERY",
                    wildcard: '%QUERY'
                }
            });

            // Implement the movies validation (must pick a movie)
            $.validator.addMethod("movieSelected",
                function() {
                    return vm.movieIds && vm.movieIds.length > 0;
                });

            $("#newRentalForm").validate({
                messages: {
                    customers: "Select a valid customer",
                    movies: "Select at least one movie"
                },
                submitHandler: function (element, e) {
                    e.preventDefault();

                    $.ajax({
                        url: "/api/NewRentals",
                        type: "POST",
                        data: vm
                    }).done(function() {
                        toastr.success("Rentals successfully recorded");
                    }).fail(function() {
                        toastr.fail("Failed to record the rentals.");
                    });
                }
            });

            $("#movie").typeahead({
                highlight: true
            }, {
               name: 'movies',
                display: 'name',
                 source: movies
            }).on("typeahead:select",
                function (e, movie) {
                    $("#movies").append("<li class='list-group-item'>" + movie.name + "</li>");
                    $("#movie").typeahead("val", "");

                    // Store the movies to send to the server
                    vm.movieIds.push(movie.id);
                });
            });
    </script>
}
